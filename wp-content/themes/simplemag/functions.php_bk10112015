<?php
/**
 * SimpleMag functions and definitions
 *
 * @package SimpleMag
 * @since 	SimpleMag 1.0
**/
include_once ( 'cropupload_helper.php' );

/* Install plugins for theme use */
include_once ( 'admin/tgm/tgm-init.php' );


/* Content Width */
if ( ! isset( $content_width ) ) 
	$content_width = 1050; /* pixels */


/* Theme Setup */
function ti_theme_setup() {

	/* Register Menus  */
	register_nav_menus( array(
		'main_menu' => __( 'Main Menu', 'themetext' ), // Main site menu
		'secondary_menu' => __( 'Secondary Menu', 'themetext' ), // Main site menu
		'footer_menu' => __( 'Footer Menu', 'themetext' ), // Footer site menu
	));

	/*  Post Formats */
	add_theme_support( 'post-formats', array( 'video', 'gallery', 'audio' ) );

	/* Images */
	add_theme_support( 'post-thumbnails' );
	add_image_size( 'rectangle-size', 330, 220, true );
	add_image_size( 'rectangle-size-small', 296, 197, true );
	add_image_size( 'masonry-size', 330, 9999 );
	add_image_size( 'medium-size', 690, 9999 );
	add_image_size( 'big-size', 1050, 9999 );
	global $ti_option;
	add_image_size( 'gallery-carousel', 9999, $ti_option['site_carousel_height'] );

	/* Enable post and comment RSS feed links */
	add_theme_support( 'automatic-feed-links' );

	/* Theme localization */
	load_theme_textdomain( 'themetext', get_template_directory() . '/languages' );
	
}
add_action( 'after_setup_theme', 'ti_theme_setup' );


/**
 * Filters wp_title to print a neat <title> tag based on what is being viewed.
**/
function ti_wp_title( $title, $sep ) {

	if ( is_feed() ) {
		return $title;
	}

	global $page, $paged;

	// Add the blog name
	$title .= get_bloginfo( 'name', 'display' );

	// Add the blog description for the home/front page.
	$site_description = get_bloginfo( 'description', 'display' );
	if ( $site_description && ( is_home() || is_front_page() ) ) {
		$title .= " $sep $site_description";
	}

	// Add a page number if necessary:
	if ( ( $paged >= 2 || $page >= 2 ) && ! is_404() ) {
		$title .= " $sep " . sprintf( __( 'Page %s', 'simpletheme' ), max( $paged, $page ) );
	}

	return $title;
}
add_filter( 'wp_title', 'ti_wp_title', 10, 2 );



/**
 * Add classes to the body tag
**/
function ti_body_classes( $classes ){

	global $post, $ti_option;
	
	if ( !is_rtl() ) {
		$classes[] = 'ltr';
	}

	// Page Name as body class name
	if ( is_page() ) {
		$page_name = $post->post_name;
		$classes[] = 'page-'.$page_name;
 	} 

	// If page have sidebar enabled
	if ( get_field( 'page_sidebar' ) == 'page_sidebar_on' || get_field( 'comp_page_sidebar' ) == 'comp_sidebar_page' || get_field('category_slider', 'category_' . get_query_var('cat') ) == 'cat_slider_on' && get_field('category_slider_position', 'category_' . get_query_var('cat') ) == 'cat_slider_above' && get_field( 'category_sidebar', 'category_' . get_query_var('cat') ) == 'cat_sidebar_on' ) { 
		$classes[] = 'with-sidebar';
	}

	// Text Alignmnet Left for the whole site
	if ( $ti_option['text_alignment'] == '2' ) {
		$classes[] = 'text-left';
	}

	return $classes;
}
add_filter( 'body_class', 'ti_body_classes' );



/**
 * Add classes to top strip based on Theme Options selections
**/
function ti_top_strip_class(){

	global $ti_option;

	// Hide/Show top strip
	if ( $ti_option['site_top_strip'] == 0 ) { echo ' hide-strip'; }

	// Make top strip fixed
	if ( $ti_option['site_fixed_menu'] == '2' ) { echo ' top-strip-fixed'; }

	// If top strip have white background
	if ( $ti_option['site_top_strip_bg'] == '#ffffff') { echo ' color-site-white'; }

}


/**
 * Posts Meta Data. Category and Date.
**/
function ti_meta_data(){
	
	global $ti_option;
	
	// Category Name
	if ( is_single() ) {
		if ( $ti_option['single_post_cat_name'] == true ) {
			echo '<span class="entry-category">'; the_category(', '); echo '</span>';
		}
	} else {
		echo '<span class="entry-category">'; the_category(', '); echo '</span>';
	}
	
	// Date
	$publish_date = '<time class="entry-date updated" datetime="' . get_the_time( 'c' ) . '" itemprop="datePublished">' . get_the_time( get_option( 'date_format' ) ) . '</time>';
	
	if ( is_home() || is_front_page() || is_page() ) {
		if ( $ti_option['home_post_date'] == 1 ) {
    		echo $publish_date;
		}
	} 
	if ( is_category() || is_tag() || is_author() ) {
		if ( $ti_option['archive_post_date'] == 1 ) {
    		echo $publish_date;
		}
	}
	if ( is_single() ) {
		if ( $ti_option['single_post_date'] == 1 ) {
    		echo $publish_date;
		}
	}
}


/**
 * Calculate to total score for posts with Rating feature is enabled
 *
 * Applies to:
 * 1. Latest Reviews & Latest Posts sections
 * 2. Latest Reviews widget
 * 3. Single Post
**/
function ti_rating_calc() {

    $score_rows = get_field( 'rating_module' );
    $score = array();
    
    // Loop through the scores
    if ( $score_rows ){
        foreach( $score_rows as $key => $row ){
            $score[$key] = $row['score_number'];
        }
    
	    $score_items = count( $score ); // Count the scores
	    $score_sum = array_sum( $score ); // Get the scores summ
	    $score_total = $score_sum / $score_items; // Get the score result

	    return $score_total;
	}
}
add_filter( 'ti_score_total', 'ti_rating_calc' );




/**
 * Add Previous & Next links to a numbered link list 
 * of wp_link_pages() if single post is paged
 */
function ti_wp_link_pages( $args ){

    global $page, $numpages, $more;

    if ( !$args['next_or_number'] == 'next_and_number' ){
        return $args;
    }
	
	// Keep numbers for the main part
    $args['next_or_number'] = 'number'; 
    if (!$more){
        return $args;
    }
	
	// If previous page exists
    if( $page-1 ){
        $args['before'] .= _wp_link_page($page-1) . $args['link_before']. $args['previouspagelink'] . $args['link_after'] . '</a>';
    }

	// If next page exists
    if ( $page<$numpages ){
        $args['after'] = _wp_link_page($page+1) . $args['link_before'] . $args['nextpagelink'] . $args['link_after'] . '</a>' . $args['after'];
    }

    return $args;
}
add_filter( 'wp_link_pages_args', 'ti_wp_link_pages' );



/* Theme Options */
require_once( 'admin/theme-options.php' );


/* Custom Fields */
include_once( 'admin/acf/acf.php' );
include_once( 'admin/acf-fields/acf-fields.php' );
include_once( 'admin/acf-fields/add-ons/acf-wp-editor/acf-wp_wysiwyg.php' );
define( 'ACF_LITE', true );


/* Includes */
include_once( 'inc/user-fields.php' );
include_once( 'inc/mega-menu.php' );
include_once( 'inc/styling-options.php' );
include_once( 'inc/pagination.php' );
global $ti_option;
if ( $ti_option['site_custom_gallery'] == true ) {
	include_once( 'inc/wp-gallery.php' );
}


/* Widgets */
include_once( 'widgets/ti-video.php' );
include_once( 'widgets/ti-authors.php' );
include_once( 'widgets/ti-about-site.php' );
include_once( 'widgets/ti-latest-posts.php' );
include_once( 'widgets/ti-code-banner.php' );
include_once( 'widgets/ti-image-banner.php' );
include_once( 'widgets/ti-latest-reviews.php' );
include_once( 'widgets/ti-featured-posts.php' );
include_once( 'widgets/ti-most-commented.php' );
include_once( 'widgets/ti-latest-comments.php' );
include_once( 'widgets/ti-latest-category-posts.php' );


/* Register jQuery Scripts and CSS Styles */
include_once( 'inc/register-scripts.php' );


/**
 * Excerpt length
 * Excerpt more
*/
// Excerpt Length
function ti_excerpt_length( $length ) {
	global $ti_option;
	return $ti_option['site_wide_excerpt_length'];
}
add_filter( 'excerpt_length', 'ti_excerpt_length' );

// Excerpt more
function ti_excerpt_more( $more ) {
	return '...';
}
add_filter( 'excerpt_more', 'ti_excerpt_more' );


/**
 * Different image size based on layout selection for Homepage, Categories and Posts Page
*/
function ti_layout_based_post_image() {

	$itemprop = array('itemprop' => 'image');

	if ( has_post_thumbnail() ) { // Set Featured Image
		// Images for Posts Page or if this page is used as Homepage with "Your latest posts" option
		if ( is_home() ) {
			global $ti_option;
            if ( $ti_option['posts_page_layout'] == 'grid-layout' || $ti_option['posts_page_layout'] == 'list-layout' ) {
                the_post_thumbnail( 'rectangle-size', $itemprop );
            } elseif (  $ti_option['posts_page_layout'] == 'classic-layout' ) {
                the_post_thumbnail( 'big-size', $itemprop );
            } else {
                the_post_thumbnail( 'masonry-size', $itemprop );
            }
        // Images for Homepage used with page composer and Categories
        } else {
        	if ( get_sub_field ( 'latest_posts_layout' ) == 'list-layout' || get_field ( 'category_posts_layout', 'category_' . get_query_var('cat') ) == 'list-layout' || get_sub_field ( 'latest_posts_layout' ) == 'grid-layout' || get_field ( 'category_posts_layout', 'category_' . get_query_var('cat') ) == 'grid-layout' ) {
        		the_post_thumbnail( 'rectangle-size', $itemprop );
			} elseif ( get_sub_field ( 'latest_posts_layout' ) == 'classic-layout' || get_field ( 'category_posts_layout', 'category_' . get_query_var('cat') ) == 'classic-layout' ) {
				the_post_thumbnail( 'big-size', $itemprop );
			} else {
				the_post_thumbnail( 'masonry-size', $itemprop );
			}
    	}
    } elseif( first_post_image() ) { // Set the first image from the editor
        echo '<img src="' . first_post_image() . '" class="wp-post-image" alt="' . get_the_title() . '" />';
    }
}


/**
 * Get The First Image From a Post
 */
function first_post_image() {
	global $post, $posts;
	$first_img = '';
	ob_start();
	ob_end_clean();
	if( preg_match_all('/<img.+src=[\'"]([^\'"]+)[\'"].*>/i', $post->post_content, $matches ) ){
		$first_img = $matches[1][0];
		return $first_img;
	}
}



/* Define sidebars */
function register_theme_sidebars() {

	if ( function_exists('register_sidebars') ) {
		
		// Sidebar for blog section of the site
		register_sidebar(
		   array(
			'name' => __( 'Magazine', 'themetext' ),
			'id' => 'sidebar-1',
			'description'   => __( 'Sidebar for categories and single posts', 'themetext' ),		   
			'before_widget' => '<div id="%1$s" class="widget %2$s">',
			'after_widget' => '</div>',
			'before_title' => '<h3>',
			'after_title' => '</h3>',
		   )
		);

		register_sidebar(
		   array(
			'name' => __( 'Pages', 'themetext' ),  
			'id' => 'sidebar-2',
			'description'   => __( 'Sidebar for static pages', 'themetext' ),
			'before_widget' => '<div id="%1$s" class="widget %2$s">',
			'after_widget' => '</div>',
			'before_title' => '<h3>',
			'after_title' => '</h3>',
		   )
		);

		register_sidebar(
		   array(
			'name' => __( 'Footer Area One', 'themetext' ),  
			'id' => 'sidebar-3',
			'before_widget' => '<div id="%1$s" class="widget %2$s">',
			'after_widget' => '</div>',
			'before_title' => '<h3>',
			'after_title' => '</h3>',
		   )
		);
		
		register_sidebar(
		   array(
			'name' => __( 'Footer Area Two', 'themetext' ),
			'id' => 'sidebar-4',
			'before_widget' => '<div id="%1$s" class="widget %2$s">',
			'after_widget' => '</div>',
			'before_title' => '<h3>',
			'after_title' => '</h3>',
		   )
		);
		
		register_sidebar(
		   array(
			'name' => __( 'Footer Area Three', 'themetext' ),  
			'id' => 'sidebar-5',
			'before_widget' => '<div id="%1$s" class="widget %2$s">',
			'after_widget' => '</div>',
			'before_title' => '<h3>',
			'after_title' => '</h3>',
		   )
		);

	}

}
add_action( 'widgets_init', 'register_theme_sidebars' );


/* Count the number of footer sidebars to enable dynamic classes for the footer */
function ti_footer_sidebar_class() {
	$count = 0;

	if ( is_active_sidebar( 'sidebar-3' ) )
		$count++;

	if ( is_active_sidebar( 'sidebar-4' ) )
		$count++;

	if ( is_active_sidebar( 'sidebar-5' ) )
		$count++;

	$class = '';

	switch ( $count ) {
		case '1':
			$class = ' col-1';
			break;
		case '2':
			$class = ' col-2';
			break;
		case '3':
			$class = ' col-3';
			break;
	}

	if ( $class )
		echo $class;
}


/**
 * Remove rel attribute from the category list
 */
function remove_category_list_rel( $output ) {
    return str_replace( 'rel="category tag"', '', $output );
}
add_filter( 'wp_list_categories', 'remove_category_list_rel' );
add_filter( 'the_category', 'remove_category_list_rel' );
/**
 * Remove review woocommerce
 */
add_filter( 'woocommerce_product_tabs', 'sb_woo_remove_reviews_tab', 98);
function sb_woo_remove_reviews_tab($tabs) {
	unset($tabs['reviews']);
	return $tabs;
}

add_action('woocommerce_before_main_content', create_function('', 'echo "<div class=\"wrapper\">";'), 1);

add_action('woocommerce_after_main_content', create_function('', 'echo "</div>";'), 1);





/* Function add product */
if (!function_exists('addwooProduct')):
    
    function addwooProduct($data) {
        $current_user = wp_get_current_user();
        if (!($current_user instanceof WP_User))
            return;
    
        $post = array(
            'post_author' => $current_user->ID,
            'post_content' => $data['content'],
            'post_status' => "publish",
            'post_title' => $data['name'],
            'post_parent' => '',
            'post_type' => "product",
        );
        //Create post
        $new_post_id = wp_insert_post($post, $wp_error);

        wp_set_object_terms($new_post_id, 8, 'product_cat');
        wp_set_object_terms($new_post_id, 'variable', 'product_type');
        
        update_post_meta($new_post_id, '_visibility', 'hidden');
        update_post_meta($new_post_id, '_stock_status', 'instock');
        update_post_meta($new_post_id, 'total_sales', '0');
        update_post_meta($new_post_id, '_downloadable', 'no');
        update_post_meta($new_post_id, '_virtual', 'no');
        update_post_meta($new_post_id, '_regular_price', '1');
        update_post_meta($new_post_id, '_purchase_note', "");
        update_post_meta($new_post_id, '_featured', "no");
        update_post_meta($new_post_id, '_weight', "");
        update_post_meta($new_post_id, '_length', "");
        update_post_meta($new_post_id, '_width', "");
        update_post_meta($new_post_id, '_height', "");
        update_post_meta($new_post_id, '_sku', "");
		
		 $i = 0;
		$attributes = array('sales_goal'=>$data['sales_goal'],'campaign_length'=>$data['campaign_length']);
		// Loop through the attributes array
		/*
		foreach ($attributes as $name => $value) {
			$product_attributes[$name] = array (
				'name' => htmlspecialchars( stripslashes( $name ) ), // set attribute name
				'value' => $value, // set attribute value
				'position' => 1,
				'is_visible' => 1,
				'is_variation' => 1,
				'is_taxonomy' => 0
			);
			$i++;
		}
		*/
		
		//Array for setting attributes
		$avail_attributes = array(
		'S',
		'M',
		'L',
		'XL',
		'XXL'
		);
		wp_set_object_terms($new_post_id, $avail_attributes, 'size');
		/*
		$product_attributes['size'] =Array(
		'name'=>'size',
		'value'=>'',
		'is_visible' => '1', 
		'is_variation' => '1',
		'is_taxonomy' => '1'
		);
		*/
		$product_attributes = array('size'=>array(
				'name'=>'Size',
				'value'=>'S | M | L | XL | XXL',
				'position'=>'0',
				'is_visible'=>'1',
				'is_variation'=>'1',
				'is_taxonomy'=>'0',
				));
						
		update_post_meta($new_post_id, '_product_attributes', $product_attributes);
		
		//###################### Add Variation post types for sizes #############################
//insert 5 variations post_types for 2xl, xl, lg, md, sm:
	$i=1;
    while ($i<=5) {//while creates 5 posts(1 for ea. size variation 2xl, xl etc):
    $my_post = array(
    'post_title'=> 'Variation #' . $i . ' of 5 for prdct#'. $new_post_id,
    'post_name' => 'product-' . $new_post_id . '-variation-' . $i,
    'post_status' => 'publish',
    'post_parent' => $new_post_id,//post is a child post of product post
    'post_type' => 'product_variation',//set post type to product_variation
    'guid'=>home_url() . '/?product_variation=product-' . $new_post_id . '-variation-' . $i
    );

    //Insert ea. post/variation into database:
    $attID = wp_insert_post( $my_post );
    $logtxt .= "Attribute inserted with ID: $attID\n";
    //set IDs for product_variation posts:
    $variation_id = $new_post_id + 1;
    $variation_two = $variation_id + 1;
    $variation_three = $variation_two + 1;
    $variation_four = $variation_three + 1;
    $variation_five = $variation_four + 1;

    //Create 2xl variation for ea product_variation:
    update_post_meta($variation_id, 'attribute_size', 'XXL');
    update_post_meta($variation_id, '_price', $data['price']);
    update_post_meta($variation_id, '_regular_price', $data['price']);
    //add size attributes to this variation:
    wp_set_object_terms($variation_id, $avail_attributes, 'size');
    $thedata = Array('size'=>Array(
    'name'=>'Size',
    'value'=>'',
    'is_visible' => '1', 
    'is_variation' => '1',
    'is_taxonomy' => '1'
    ));
    update_post_meta( $variation_id,'_product_attributes',$thedata);

    //Create xl variation for ea product_variation:
    update_post_meta( $variation_two, 'attribute_size', 'XL');
    update_post_meta( $variation_two, '_price', $data['price'] );
    update_post_meta( $variation_two, '_regular_price', $data['price']);
    //add size attributes:
    wp_set_object_terms($variation_two, $avail_attributes, 'size');
    $thedata = Array('size'=>Array(
    'name'=>'Size',
    'value'=>'',
    'is_visible' => '1', 
    'is_variation' => '1',
    'is_taxonomy' => '1'
    ));
    update_post_meta( $variation_two,'_product_attributes',$thedata);
    
    //Create lg variation for ea product_variation:
    update_post_meta( $variation_three, 'attribute_size', 'L');
    update_post_meta( $variation_three, '_price', $data['price'] );
    update_post_meta( $variation_three, '_regular_price', $data['price']);
    wp_set_object_terms($variation_three, $avail_attributes, 'size');
    $thedata = Array('size'=>Array(
    'name'=>'Size',
    'value'=>'',
    'is_visible' => '1', 
    'is_variation' => '1',
    'is_taxonomy' => '1'
    ));
    update_post_meta( $variation_three,'_product_attributes',$thedata);

    //Create md variation for ea product_variation:
    update_post_meta( $variation_four, 'attribute_size', 'M');
    update_post_meta( $variation_four, '_price', $data['price'] );
    update_post_meta( $variation_four, '_regular_price', $data['price']);
    wp_set_object_terms($variation_four, $avail_attributes, 'size');
    $thedata = Array('size'=>Array(
    'name'=>'Size',
    'value'=>'',
    'is_visible' => '1', 
    'is_variation' => '1',
    'is_taxonomy' => '1'
    ));
    update_post_meta( $variation_four,'_product_attributes',$thedata);

    //Create sm variation for ea product_variation:
    update_post_meta( $variation_five, 'attribute_size', 'S');
    update_post_meta( $variation_five, '_price', $data['price'] );
    update_post_meta( $variation_five, '_regular_price', $data['price']);
    wp_set_object_terms($variation_five, $avail_attributes, 'size');
    $thedata = Array('size'=>Array(
    'name'=>'Size',
    'value'=>'',
    'is_visible' => '1', 
    'is_variation' => '1',
    'is_taxonomy' => '1'
    ));
    update_post_meta( $variation_five,'_product_attributes',$thedata);

$i++;
}//end while i is less than or equal to 5(for 5 size variations)
//############################ Done adding variation posts ############################

		/*	
        update_post_meta($new_post_id, '_sale_price_dates_from', "");
        update_post_meta($new_post_id, '_sale_price_dates_to', "");
        update_post_meta($new_post_id, '_price', $data['price']);
        update_post_meta($new_post_id, '_sold_individually', "");
        update_post_meta($new_post_id, '_manage_stock', "no");
        update_post_meta($new_post_id, '_backorders', "no");
        update_post_meta($new_post_id, '_stock', "");

        update_post_meta($new_post_id, '_download_limit', '');
        update_post_meta($new_post_id, '_download_expiry', '');
        update_post_meta($new_post_id, '_download_type', '');
        update_post_meta($new_post_id, '_product_image_gallery', '');
		*/
		foreach ($attributes as $name => $value) {
			update_post_meta($new_post_id, '_'.$name, $value);
		}
		update_post_meta($new_post_id, '_price', $data['price']);
        return $new_post_id;
    }

endif;

/* Function add quiz point */
if (!function_exists('postCampaign')) :

    function postCampaign() {
        global $wpdb;
		
	    $current_user = wp_get_current_user();
		
		
        if (!$current_user->ID):
			$response = array(
            'status'=> 'error',
			'message' =>'Please login!');
            wp_send_json($response);
		else:
		
            
		
        $post_date = date('Y-m-d H:i:s');
        $data = $_POST['data'];
        $data_desgin = $_POST['design_data'];
		
        $campaign_data = array();
		
        parse_str($_POST['data'], $campaign_data);
        
		
       $product_id = addwooProduct($campaign_data);
      
        $decoded = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $data_desgin));

        $upload_dir = wp_upload_dir();
		
		$src_image = imagecreatefromstring($decoded);
		
		
		$_w = imagesx($src_image);
		$_h = imagesy($src_image);
		$ratio = $_w / $image_width;
	
		// Resample
		$image_front = imagecreatetruecolor($_w, $_h/2);
		$image_back = imagecreatetruecolor($_w, $_h/2);
		imagealphablending( $image_front, false );
		imagesavealpha( $image_front, true );
		imagealphablending( $image_back, false );
		imagesavealpha( $image_back, true );
		
		imagecopyresampled($image_front, $src_image, 0, 0, 0, 0, $_w, $_h/2, $_w, $_h/2);
		imagecopyresampled($image_back, $src_image, 0, 0, 0, $_h/2, $_w, $_h/2, $_w, $_h/2);

		// Output
		
		
		//$avatar_data = '{"x":40.20219780219781,"y":23.20494505494506,"height":215.20000000000002,"width":215.20000000000002,"rotate":0}';
		//$crop = new CropAvatar($upload_dir['path'], 'file_name.png', $avatar_data, $decoded);

        
		
		
        // @new
        $upload_path = str_replace('/', DIRECTORY_SEPARATOR, $upload_dir['path']) . DIRECTORY_SEPARATOR;

        //  $decoded = base64_decode($data);

        $filename = preg_replace('/[^A-Za-z0-9 _ .-]/', '', $campaign_data['name']).'_front.png';

        $hashed_filename = md5($filename . microtime()) . '_' . $filename;
		
		$filename2 = preg_replace('/[^A-Za-z0-9 _ .-]/', '', $campaign_data['name']).'_back.png';
		$hashed_filename2 = md5($filename2 . microtime()) . '_' . $filename2;

        // @new
        //$image_upload = file_put_contents($upload_path . $hashed_filename, $decoded);
		imagepng($image_front,$upload_path . $hashed_filename);
		imagepng($image_back,$upload_path . $hashed_filename2);
		
		
		
        //HANDLE UPLOADED FILE
        if (!function_exists('wp_handle_sideload')) {

            require_once( ABSPATH . 'wp-admin/includes/file.php' );
        }

        // Without that I'm getting a debug error!?
        if (!function_exists('wp_get_current_user')) {

            require_once( ABSPATH . 'wp-includes/pluggable.php' );
        }

        // @new
        $file = array();
        $file['error'] = '';
        $file['tmp_name'] = $upload_path . $hashed_filename;
        $file['name'] = $hashed_filename;
        $file['type'] = 'image/jpg';
        $file['size'] = filesize($upload_path . $hashed_filename);

        // upload file to server
      
        $filename_ = wp_handle_sideload($file, array('test_form' => false));
       
        $file_name = $filename_['file'];

        $filetype = wp_check_filetype(basename($file_name), null);

        $wp_upload_dir = wp_upload_dir();

        $attachment = array(
            'guid' => $wp_upload_dir['url'] . '/' . basename($file_name),
            'post_mime_type' => $filetype['type'],
            'post_title' => preg_replace('/\.[^.]+$/', '', basename($file_name)),
            'post_content' => '',
            'post_status' => 'inherit'
        );

		
        $attach_id = wp_insert_attachment($attachment, $file_name, $product_id);
		
		
        $file2 = array();
        $file2['error'] = '';
        $file2['tmp_name'] = $upload_path . $hashed_filename2;
        $file2['name'] = $hashed_filename2;
        $file2['type'] = 'image/jpg';
        $file2['size'] = filesize($upload_path . $hashed_filename2);

        $filename_2 = wp_handle_sideload($file2, array('test_form' => false));
       
        $file_name2 = $filename_2['file'];

        $filetype = wp_check_filetype(basename($file_name2), null);

        $wp_upload_dir = wp_upload_dir();

        $attachment2 = array(
            'guid' => $wp_upload_dir['url'] . '/' . basename($file_name2),
            'post_mime_type' => $filetype['type'],
            'post_title' => preg_replace('/\.[^.]+$/', '', basename($file_name2)),
            'post_content' => '',
            'post_status' => 'inherit'
        );

       $attach_id2 = wp_insert_attachment($attachment2, $file_name2, $product_id);
		
        require_once( ABSPATH . 'wp-admin/includes/image.php' );

        $attach_data = wp_generate_attachment_metadata($attach_id, $file_name);
        wp_update_attachment_metadata($attach_id, $attach_data);
        
		$attach_data2 = wp_generate_attachment_metadata($attach_id2, $file_name2);
        wp_update_attachment_metadata($attach_id2, $attach_data2);
		add_post_meta($product_id, '_thumbnail_id', $attach_id);
        
		update_post_meta( $product_id, '_product_image_gallery', implode( ',', array($attach_id,$attach_id2) ) );

        

        $response = array(
            'post_date' => $post_date,
            'status'=> 'success',
            'product_title' => get_the_title($product_id),
            'product_link' => get_permalink($product_id),
            'product_image' =>$filename_['url'],
        );
        wp_send_json($response);
		endif;
    }

    add_action('wp_ajax_postCampaign', 'postCampaign');
    add_action('wp_ajax_nopriv_postCampaign', 'postCampaign');
endif;

add_action('init', 'wpse_74054_add_author_woocommerce', 999 );

function wpse_74054_add_author_woocommerce() {
    add_post_type_support( 'product', 'author' );
}



function woo_add_custom_general_fields() {

  global $woocommerce, $post;
  
  echo '<div class="options_group">';
  //		$attributes = array('sales_goal'=>$data['sales_goal'],'campaign_length'=>$data['campaign_length']);

  // Custom fields will be created here...
  woocommerce_wp_text_input( 
		array( 
			'id'          => '_sales_goal', 
			'label'       => __( 'Sales Goal', 'woocommerce' ), 
			'placeholder' => '',
			'desc_tip'    => 'true',
			'description' => __( 'Enter the Sales goal here.', 'woocommerce' ) ,
			'type'              => 'number', 
			'custom_attributes' => array(
				'step' 	=> 'any',
				'min'	=> '3'
			) 
		)
	);
  
  echo '</div>';
  /*
   echo '<div class="options_group">';

  // Custom fields will be created here...
  woocommerce_wp_text_input( 
		array( 
			'id'          => '_start_date', 
			'label'       => __( 'Start Date', 'woocommerce' ), 
			'placeholder' => 'YYYY-MM-DD',
			'pattern'  =>'[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])',
			'maxlength' => 10,
			'description' => __( 'Enter the Start Date here.', 'woocommerce' ) ,
			'type'              => 'text', 
			'class'=> 'short hasDatepicker'
		)
	);
  
  echo '</div>';
  */
  echo '<div class="options_group">';
  // Select
	$list_length = array(3,5,7,10,14,21);
	$options = array();
	foreach($list_length as $n_date){
									$date = new DateTime($post->post_date);
									$date->add(new DateInterval('P'.$n_date.'D'));
									$name = $n_date.' Days';
								$options[$n_date]=$name;	
	}
	woocommerce_wp_select( 
	array( 
		'id'      => '_campaign_length', 
		'label'   => __( 'Campaign length', 'woocommerce' ), 
		'options' => $options
		)
	);
	echo '</div>';
}
// Text Field
function woo_add_custom_general_fields_save( $post_id ){
	$woocommerce_text_field = $_POST['_sales_goal'];
	if( !empty( $woocommerce_text_field ) )
		update_post_meta( $post_id, '_sales_goal', esc_attr( $woocommerce_text_field ) );
	
	
	$woocommerce_text_field = $_POST['_campaign_length'];
	if( !empty( $woocommerce_text_field ) )
		update_post_meta( $post_id, '_campaign_length', esc_attr( $woocommerce_text_field ) );
	
	
}
	
// Display Fields
add_action( 'woocommerce_product_options_general_product_data', 'woo_add_custom_general_fields' );

// Save Fields
add_action( 'woocommerce_process_product_meta', 'woo_add_custom_general_fields_save' );


function add_countdown(){
	global $post, $product;
	
	
	$length = get_post_meta($product->id,'_campaign_length',true);
	
	if($length>0):
	$date=new DateTime();
	$date->setTimestamp(get_post_time('U', true));
	$current_date = new DateTime();
	$date->add(new DateInterval('P'.$length.'D'));
	$seconds = $date->getTimestamp() - current_time( 'timestamp',true );
    $seconds = $seconds>0?$seconds:0;
	
	?>
	</div>
	<br>
	<div id="campaign_countdown">
	</div>
	<script type="application/javascript">
	var myCountdown1 = new Countdown({
										time: <?php echo $seconds; ?>, 
										width:300, 
										height:60,  
										rangeHi:"day",
										target	 	: "campaign_countdown",
										hideLine: true,
										padding : 0.8, numbers		: 	{
														font 	: '"Open Sans", "Helvetica Neue", Arial, sans-serif',
														color	: "#6c7478",
														bkgd	: "#FFFFFF",
														fontSize : 200,
														rounded	: 0.15,				
														shadow	: {
																	x : 0,			
																	y : 0,			
																	s : 0,			
																	c : "#fff",	
																	a : 0			
																	}
														},
										labels : {
													textScale : 0.8,
													offset : 5
												} 
									});
	</script>
	<div>
	<?php
	endif;
}



add_action('woocommerce_product_meta_end', 'add_countdown');

function add_product_footer(){
	global $post, $product;
	?>
	<div class="row">
	<div class="  col-md-7">1</div>
	<div class="  col-md-5">2</div>
	</div>
	<?php
}

add_action('woocommerce_after_single_product', 'add_product_footer');
